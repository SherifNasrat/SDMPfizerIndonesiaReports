@using SDMIndonesiaReports.App_GlobalResources;
@using Resources;
@using SDMIndonesiaReports.Shared;
@model SDMIndonesiaReports.Models.CustomModels.FFPerformanceByFFConfigVM
@{
    ViewBag.Title = Resources.Pages_Resources.ffPerformanceByFFConfig;
    var classDiv = (SDMIndonesiaReports.Shared.CultureHelper.IsRighToLeft()) ? "k-rtl" : "portlet-body";
    string columnHeaderStyle = "background-color: #DDD; font-size: 14px; font-weight: 400; color: #666;   font-size: 14px; font-weight: 700; font-color: #555555; white-space: normal;text-align: center;";
    SessionContainer.BreadCrumbText = new List<string>();
    SessionContainer.BreadCrumbLinks = new List<string>();
    SessionContainer.BreadCrumbText.Add(Pages_Resources.ffPerformanceByFFConfig);
    SessionContainer.BreadCrumbLinks.Add(Url.Action("Index", "FFPerformanceByFFConfig"));
}
<script type="text/javascript">

    $(function () {

        $(".k-grid-content").css("height", "20px");
    });
</script>


<div class="row-fluid">
    <div class="span6 responsive" data-tablet="span12 fix-offset" data-desktop="span6" style="width: 100%;">
        <div class="portlet box grey">
            <div class="portlet-title">
                <div class="caption"><i class="icon-user"></i>@Resources.Pages_Resources.ffPerformanceByFFConfig</div>
                <div class="actions">
                    <div class="btn-group">
                        @*@(Html.Kendo().ToolBar().Name("Export"))
                                {

                                }
                            )*@

                        @*<a class="btn green" href="#" data-toggle="dropdown">
                                <i class="icon-cogs"></i> @Global_Label_Resource.Export
                                <i class="icon-angle-down"></i>
                            </a>

                            <ul class="dropdown-menu pull-right">
                                <li>
                                    <a id="ExportPdfbtn" data-export="yes" href="@Url.Action("ExportPdf", "TeamToProduct", new {filter = "~", sort = "~", state = "~" , countryID = "~", fromPeriodID = "~", toPeriodID = "~" })">
                                        <i class="@Global_UI_Resource.IconDownload"></i>Export Pdf
                                    </a>
                                </li>
                                <li>
                                    <a id="ExportXlsbtn" data-export="yes" href="@Url.Action("ExportXls", "TeamToProduct", new { pageSize = "~", filter = "~", sort = "~", state = "~", countryID = "~", fromPeriodID = "~", toPeriodID = "~" })">
                                        <i class="@Global_UI_Resource.IconDownload"></i>Export Xls
                                    </a>
                                </li>
                            </ul>*@
                    </div>
                </div>
            </div>
            <div class="clearfix">
                <div class="pull-right">
                    @(Html.Kendo().DropDownList()
                              .Name("Country")
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .DataSource(source => source.Read(read =>
                              {
                                  read.Action("Countries_Read", "FFPerformanceByFFConfig");
                              })
                              .ServerFiltering(true)
                              )
                              .Events(e => e.Change("reloadProfiles"))
                              .OptionLabel("Select Country")


                    )



                    <div class="pull-right">
                        <a id="kendoIconButton" onclick="HideColumns();" class="btn blue" style="height:14px; width:auto;margin-top:1px; margin-right:10px; text-align:center; line-height:14px">@Global_Label_Resource.viewreport</a>

                    </div>
                    <div class="pull-right" style="margin-left:3px; margin-right:3px; height:auto;">
                        @(Html.Kendo().MultiSelect()
                                .Name("Profiles")
                                .AutoClose(false)
                                .DataTextField("Text")
                                .DataValueField("Value")
                                        .Filter(FilterType.StartsWith)
                                .DataSource(source => source.Read(read =>
                              {
                                  read.Action("Profiles_Read", "FFPerformanceByFFConfig").Data("getCountryandPeriods");
                              })
                               .ServerFiltering(false)
                              )
                                //.Events(e => { e.Change("reloadGrid"); })
                              .Placeholder("Select Profiles")
                              .HighlightFirst(true).Filter("contains")
                              .HtmlAttributes(new { style = "width:200px" })

                        )
                       
                    </div>
           
                    @(Html.Kendo().DropDownList()
                            // .Events(e => e.Select("reloadGrid"))
                              .Name("FromPeriod")
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .DataSource(source => source.Read(read =>
                              {
                                  read.Action("Periods_Read", "FFPerformanceByFFConfig").Data("getCountry");
                              })
                              .ServerFiltering(true)
                              )
                          //.Events(e => { e.Change("reloadAll"); })
                              .CascadeFrom("Country")
                              .OptionLabel(new { Text = "From Period", Value = (int?)null })
                    )

                    @(Html.Kendo().DropDownList()
                            // .Events(e => e.Select("reloadGrid"))
                              .Name("ToPeriod")
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .DataSource(source => source.Read(read =>
                              {
                                  read.Action("Periods_Read", "FFPerformanceByFFConfig").Data("getCountry");
                              })
                              .ServerFiltering(true)
                              )
                               // .Events(e => { e.Change("reloadAll"); })
                              .CascadeFrom("Country")
                                    .OptionLabel(new { Text = "To Period", Value = (int?)null })
                    )

                    @(Html.Kendo().DropDownList()
                              .Name("Positions")
                              .DataTextField("Text")
                              .DataValueField("Value")
                              .DataSource(source => source.Read(read =>
                              {
                                  read.Action("Positions_Read", "FFPerformanceByFFConfig");
                              })
                              .ServerFiltering(true)
                              )
                              // .Events(e => { e.Change("HideColumns"); })
                              .OptionLabel("Select Position")


                    )

               


                </div>
            </div>
            <div class="@classDiv">
                @(Html.Kendo().Grid<SDMIndonesiaReports.Models.CustomModels.FFPerformanceByFFConfigVM>()
                .Name("grid")
                  .ToolBar(tools =>
                                {
                                    tools.Template(@<div>
                                        
                                        <a class="k-button" data-export="yes" href="@Url.Action("ExportXls", "FFPerformanceByFFConfig", new { filter = "~", sort = "~", state = "~", countryID = "~", fromPeriodID = "~", toPeriodID = "~", positionID = "~", profileIDs = '~' })"><span class='k-icon k-i-excel'></span> Export to Excel</a>
                                                        <a class="k-button " data-export="yes" href="@Url.Action("ExportPdf", "FFPerformanceByFFConfig", new { filter = "~", sort = "~", state = "~", countryID = "~", fromPeriodID = "~", toPeriodID = "~", positionID = "~", profileIDs = '~' })"><span class='k-icon k-i-pdf'></span> Export to PDF</a>
                                    </div>);
                                })

.Columns(columns =>
{
    columns.Bound(m => m.SM).Title("SM").Width(150).HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.AM).Title("AM").Width(150).HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.HCR).Title("HCR").Width(150).HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.Team_Name).Width(150).Title("Team").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.Att).Width(150).Title("Att").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.Bud).Width(150).Title("Bud").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.Ach).Width(150).Title("Ach").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.Percent).Width(150).Title("%").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.Perf_null).Width(150).Title("Perf").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.MCR).Width(150).Title("MCR").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.DCR).Width(150).Title("DCR").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.PC).Width(150).Title("PC").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.EC).Width(150).Title("EC").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.ACC).Width(150).Title("ACC").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.Pre).Width(150).Title("Pre").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.JV).Width(150).Title("JV").HeaderHtmlAttributes(new { style = columnHeaderStyle });
    columns.Bound(m => m.Perf).Width(150).Title("Perf").HeaderHtmlAttributes(new { style = columnHeaderStyle });

})
.Pageable(pageable => { pageable.PageSizes(true); pageable.Input(true); pageable.Numeric(true); pageable.Refresh(true); })
.Sortable()
.Groupable()
.Filterable()
.AutoBind(false)
.Scrollable(s => s.Height("Auto"))
.Resizable(resize => resize.Columns(true))
.Reorderable(reorder => { reorder.Columns(true); })
.DataSource(dataSource => dataSource
.Ajax()
.Batch(true)
.ServerOperation(false)

.Events(events =>
    {
        events.Change("onDataBound");
    })
.PageSize(10)

 .Read(read => read.Action("FFPerformanceByFFConfig_Read", "FFPerformanceByFFConfig").Data("getParameters")))
                )
                
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script type="text/javascript">

        function getParameters() {

            return {
                countryID: $("#Country").val(),
                fromPeriodID: $("#FromPeriod").val(),
                toPeriodID: $("#ToPeriod").val(),
                profileIDs: $("#Profiles").val(),
                positionID: $("#Positions").val()
            };


        };
        function getCountry() {

            return {
                countryID: $("#Country").val()
                //

            };
        };
        function getProvince() {
            return {
                provinceID: $("#Province").val()
            };
        }
        function getCountryandPeriods() {
            return {
                countryID: $("#Country").val(),
                fromPeriodID: $("#FromPeriod").val(),
                toPeriodID: $("#ToPeriod").val()
            };
        };
        function reloadGrid() {
            //do a read request to re-fill the grid with the existing data configurations
           
            var grid = $('#grid').data('kendoGrid');

            grid.dataSource.read();
          //  grid.refresh();
        }
        function reloadAll() {
            var Profiles = $("#Profiles").data('kendoMultiSelect');

            Profiles.dataSource.read();
            //Profiles.refresh();

            var grid = $('#grid').data('kendoGrid');
            grid.dataSource.read();
            //grid.refresh();
        };
        function reloadProfiles() {
            if ($("#Country").val() != null) {
                var Profiles = $("#Profiles").data('kendoMultiSelect');

                Profiles.dataSource.read();
            }
        };
        function HideColumns()
        {
            var grid = $('#grid').data('kendoGrid');
            if ($("#Positions").val() == 1) {
                showAllColumns();
                grid.hideColumn(15);
            }
            else if ($("#Positions").val() == 2) {
                showAllColumns();
                grid.hideColumn(2);
                grid.hideColumn(3);
            }
            else if ($("#Positions").val() == 3) {
                showAllColumns();
                grid.hideColumn(1);
                grid.hideColumn(2);
                grid.hideColumn(3);
            }
            else {
                showAllColumns();
                grid.hideColumn(15);
            }
        }
        function showAllColumns()
        {
            var grid = $('#grid').data('kendoGrid');
            var columns = grid.getOptions().columns;
            columns.forEach(function (me) {

                if (me.hidden !== undefined && me.hidden === true) {
                    grid.showColumn(me.field);
                }
            });
            
        }
        function onDataBound(e) {

            var grid = $('#grid').data('kendoGrid');
            if (grid.dataSource.view().length != 0) {
                $(".k-grid-content").removeAttr("style");
            }
            else {
                $(".k-grid-content").css("height", "20px");
            }
           

          
            var requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
          .options.parameterMap({

              page: grid.dataSource.page(),
              sort: grid.dataSource.sort(),
              filter: grid.dataSource.filter(),
              take: grid.dataSource.take(),
              countryID: $("#Country").val(),
              fromPeriodID: $("#FromPeriod").val(),
              toPeriodID: $("#ToPeriod").val(),
              profileIDs: $("#Profiles").val(),
              positionID: $("#Positions").val()
          });

           
            $("[dataexport='yes'],[data-export='yes']").each(function () {
                // Get its 'href' attribute - the URL where it would navigate to
                var href = $(this).attr('href');

                // Update the 'page' parameter with the grid's current page
                href = href.replace(/page=([^&]*)/, 'page=' + requestObject.page || '~');

                // Update the 'sort' parameter with the grid's current sort descriptor
                href = href.replace(/sort=([^&]*)/, 'sort=' + requestObject.sort || '~');

                // Update the 'pageSize' parameter with the grid's current pageSize
                href = href.replace(/pageSize=([^&]*)/, 'pageSize=' + grid.dataSource._pageSize);

                //update filter descriptor with the filters applied
                href = href.replace(/filter=([^&]*)/, 'filter=' + (requestObject.filter || '~'));


                href = href.replace(/countryID=([^&]*)/, 'countryID=' + requestObject.countryID || '~');

                href = href.replace(/fromPeriodID=([^&]*)/, 'fromPeriodID=' + requestObject.fromPeriodID || '~');

                href = href.replace(/toPeriodID=([^&]*)/, 'toPeriodID=' + requestObject.toPeriodID || '~');

                href = href.replace(/profileIDs=([^&]*)/, 'profileIDs=' + $("#Profiles").val() || '~');

                href = href.replace(/positionID=([^&]*)/, 'positionID=' + requestObject.positionID || '~');
               
                // Update the 'href' attribute
                $(this).attr('href', href);
            });

        }
        $("#kendoIconButton").click(function () {
            //$("#kendoIconButton").blur();
            reloadGrid();
        });
      
            function HideColumns() {
                var grid = $('#grid').data('kendoGrid');
                if ($("#Positions").val() == 1) {
                    showAllColumns();
                    grid.hideColumn(0);

                }
                else if ($("#Positions").val() == 2) {
                    showAllColumns();
                    grid.hideColumn(0);
                    grid.hideColumn(3);

                }
                else if ($("#Positions").val() == 3) {
                    showAllColumns();
                    grid.hideColumn(0);
                    grid.hideColumn(2);
                    grid.hideColumn(3);

                }
                else if ($("#Positions").val() == 4) {
                    showAllColumns();
                    grid.hideColumn(1);
                    grid.hideColumn(2);
                    grid.hideColumn(3);

                }
                else {
                    showAllColumns();
                    grid.hideColumn(0);
                }
            
        };
    </script>

}
